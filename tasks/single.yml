---
- name: set httpHosts for "{{k8s_simple_proxied_app.name}}"
  set_fact:
    httpHosts: []
    deploymentPorts: "{{ [{'containerPort': k8s_simple_proxied_app.containerPort|default(80), 'protocol': 'TCP'}] }}"
    servicePorts: "{{ [{'port': k8s_simple_proxied_app.containerPort|default(80), 'protocol': 'TCP'}] }}"

- name: set httpHosts for "{{k8s_simple_proxied_app.name}}"
  set_fact:
    httpHosts: "{{ httpHosts | union([{'host': item, 'http': { 'paths': [{ 'path':(k8s_simple_proxied_app.uriPath if k8s_simple_proxied_app.uriPath is defined else k8s_simple_proxied_app.uriRegex if k8s_simple_proxied_app.uriRegex is defined else '/'), 'pathType':(k8s_simple_proxied_app.pathType if k8s_simple_proxied_app.pathType is defined else 'Prefix'), 'backend':{'service':{ 'name':k8s_simple_proxied_app.name, 'port':{'number':k8s_simple_proxied_app.containerPort|default(80) }}}}] } }])}}"
  with_items: "{{k8s_simple_proxied_app.hostnames}}"
  when:
    - k8s_simple_proxied_app.ingressClassName is defined

- name: set deploymentPorts for "{{k8s_simple_proxied_app.name}}"
  set_fact:
    deploymentPorts: "{{ deploymentPorts | union([{'containerPort': port.number, 'protocol': 'TCP'}])}}"

  loop: "{{ k8s_simple_proxied_app.other_ports if k8s_simple_proxied_app.other_ports is defined else [] }}"
  loop_control:
    loop_var: port
  when:
    - k8s_simple_proxied_app.other_ports is defined

- name: set deploymentPorts for "{{k8s_simple_proxied_app.name}}"
  set_fact:
    servicePorts: "{{ servicePorts | union([{'port': port.number, 'protocol': 'TCP'}])}}"

  loop: "{{ k8s_simple_proxied_app.other_ports if k8s_simple_proxied_app.other_ports is defined else [] }}"
  loop_control:
    loop_var: port
  when:
    - k8s_simple_proxied_app.other_ports is defined

# - name: bebug
#   debug:
#     msg: "{{httpHosts}}"

- name: Create Certificate for "{{k8s_simple_proxied_app.name}}"
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: "{{ k8s_simple_proxied_app.name }}"
        namespace: "{{ k8s_simple_proxied_app.namespace  if k8s_simple_proxied_app.namespace is defined else 'apps' }}"
        labels:
          app: "{{k8s_simple_proxied_app.name}}"
      spec:
        secretName: "{{ k8s_simple_proxied_app.name }}-tls"
        issuerRef:
          name: "{{ k8s_simple_proxied_app.issuerRef }}"
          kind: ClusterIssuer

        dnsNames: "{{k8s_simple_proxied_app.hostnames}}"
        acme:
          config:
            - http01:
                ingressClass: nginx
              domains: "{{k8s_simple_proxied_app.hostnames}}"
  when:
    - k8s_simple_proxied_app.issuerRef is defined
    - k8s_simple_proxied_app.certName is undefined

- name: Create Common Certificate for "{{k8s_simple_proxied_app.certName}}"
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: "{{ k8s_simple_proxied_app.certName }}"
        namespace: "{{ k8s_simple_proxied_app.namespace  if k8s_simple_proxied_app.namespace is defined else 'apps' }}"
        labels:
          cert: "{{k8s_simple_proxied_app.certName}}"
      spec:
        secretName: "{{ k8s_simple_proxied_app.certName }}-tls"
        issuerRef:
          name: "{{ k8s_simple_proxied_app.issuerRef }}"
          kind: ClusterIssuer

        dnsNames: "{{k8s_simple_proxied_app.hostnames}}"
        acme:
          config:
            - http01:
                ingressClass: nginx
              domains: "{{k8s_simple_proxied_app.hostnames}}"
  when:
    - k8s_simple_proxied_app.issuerRef is defined
    - k8s_simple_proxied_app.certName is defined

- name: Create Deployment for "{{k8s_simple_proxied_app.name}} with env"
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        namespace: "{{ k8s_simple_proxied_app.namespace  if k8s_simple_proxied_app.namespace is defined else 'apps' }}"
        name: "{{k8s_simple_proxied_app.name}}"
        labels:
          app: "{{k8s_simple_proxied_app.name}}"
      spec:
        replicas: "{{ k8s_simple_proxied_app.replicas }}"
        selector:
          matchLabels:
            app: "{{k8s_simple_proxied_app.name}}"
        template:
          metadata:
            labels:
              app: "{{k8s_simple_proxied_app.name}}"
          spec:
            containers:
              - name: "{{k8s_simple_proxied_app.name}}"
                image: "{{k8s_simple_proxied_app.image}}"
                ports: "{{deploymentPorts}}"
                env: "{{ k8s_simple_proxied_app.env }}"
            imagePullSecrets: "{{ [{'name': k8s_simple_proxied_app.privateRegistry}] if k8s_simple_proxied_app.privateRegistry is defined else [] }}"

  when:
    - k8s_simple_proxied_app.env is defined

- name: Create Deployment for "{{k8s_simple_proxied_app.name}}"
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        namespace: "{{ k8s_simple_proxied_app.namespace  if k8s_simple_proxied_app.namespace is defined else 'apps' }}"
        name: "{{k8s_simple_proxied_app.name}}"
        labels:
          app: "{{k8s_simple_proxied_app.name}}"
      spec:
        replicas: "{{ k8s_simple_proxied_app.replicas }}"
        selector:
          matchLabels:
            app: "{{k8s_simple_proxied_app.name}}"
        template:
          metadata:
            labels:
              app: "{{k8s_simple_proxied_app.name}}"
          spec:
            containers:
              - name: "{{k8s_simple_proxied_app.name}}"
                image: "{{k8s_simple_proxied_app.image}}"
                imagePullPolicy: Always
                ports: "{{deploymentPorts}}"
            imagePullSecrets: "{{ [{'name': k8s_simple_proxied_app.privateRegistry}] if k8s_simple_proxied_app.privateRegistry is defined else [] }}"
  when:
    - k8s_simple_proxied_app.env is undefined

- name: Create Service for "{{k8s_simple_proxied_app.name}}"
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        namespace: "{{ k8s_simple_proxied_app.namespace  if k8s_simple_proxied_app.namespace is defined else 'apps' }}"
        name: "{{k8s_simple_proxied_app.name}}"
        labels:
          app: "{{k8s_simple_proxied_app.name}}"
      spec:
        selector:
          app: "{{k8s_simple_proxied_app.name}}"
        ports: "{{servicePorts}}"

- name: Create Ingress with https for "{{k8s_simple_proxied_app.name}} and its certname"
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        namespace: "{{ k8s_simple_proxied_app.namespace  if k8s_simple_proxied_app.namespace is defined else 'apps' }}"
        name: "{{k8s_simple_proxied_app.name}}"
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: "{{ k8s_simple_proxied_app.uriRewrite if k8s_simple_proxied_app.uriRewrite is defined else '/$2' if k8s_simple_proxied_app.uriRegex is defined else '/' }}"
          nginx.ingress.kubernetes.io/ssl-redirect: "{{k8s_simple_proxied_app.httpsRedirect | default('true')}}"
          nginx.ingress.kubernetes.io/proxy-body-size: "50m"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
        labels:
          app: "{{k8s_simple_proxied_app.name}}"
      spec:
        ingressClassName: "{{ k8s_simple_proxied_app.ingressClassName }}"
        tls:
          - hosts: "{{k8s_simple_proxied_app.hostnames}}"
            secretName: "{{k8s_simple_proxied_app.certName if k8s_simple_proxied_app.certName is defined else k8s_simple_proxied_app.name }}-tls"
        rules: "{{httpHosts }}"

  when:
    - k8s_simple_proxied_app.issuerRef is defined
    - k8s_simple_proxied_app.ingressClassName is defined
    - k8s_simple_proxied_app.ingressClassName is defined

- name: Create Ingress with http for "{{k8s_simple_proxied_app.name}}"
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        namespace: "{{ k8s_simple_proxied_app.namespace  if k8s_simple_proxied_app.namespace is defined else 'apps' }}"
        name: "{{k8s_simple_proxied_app.name}}"
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: "{{ k8s_simple_proxied_app.uriRewrite if k8s_simple_proxied_app.uriRewrite is defined else  '/$2' if k8s_simple_proxied_app.uriRegex is defined else '/' }}"
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
          nginx.ingress.kubernetes.io/proxy-body-size: "50m"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
        labels:
          app: "{{k8s_simple_proxied_app.name}}"
      spec:
        ingressClassName: "{{ k8s_simple_proxied_app.ingressClassName }}"
        rules: "{{httpHosts}}"
  when:
    - k8s_simple_proxied_app.issuerRef is undefined
    - k8s_simple_proxied_app.certName is undefined
    - k8s_simple_proxied_app.ingressClassName is defined

- name: Create Ingress with https for "{{k8s_simple_proxied_app.name}} by certname"
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        namespace: "{{ k8s_simple_proxied_app.namespace  if k8s_simple_proxied_app.namespace is defined else 'apps' }}"
        name: "{{k8s_simple_proxied_app.name}}"
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: "{{ k8s_simple_proxied_app.uriRewrite if k8s_simple_proxied_app.uriRewrite is defined else  '/$2' if k8s_simple_proxied_app.uriRegex is defined else '/' }}"
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
          nginx.ingress.kubernetes.io/proxy-body-size: "50m"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
        labels:
          app: "{{k8s_simple_proxied_app.name}}"
      spec:
        ingressClassName: "{{ k8s_simple_proxied_app.ingressClassName }}"
        rules: "{{httpHosts}}"
        tls:
          - hosts: "{{k8s_simple_proxied_app.hostnames}}"
            secretName: "{{k8s_simple_proxied_app.certName}}"
  when:
    - k8s_simple_proxied_app.issuerRef is undefined
    - k8s_simple_proxied_app.certName is defined
    - k8s_simple_proxied_app.ingressClassName is defined
